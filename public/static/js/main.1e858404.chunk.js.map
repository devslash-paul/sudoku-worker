{"version":3,"sources":["state/model.ts","state/actionTypes.ts","state/cellActions.ts","ui/Cell.tsx","ui/Board.tsx","state/undoredo.ts","state/default.ts","state/store.ts","state/cellReducer.ts","state/settingsReducer.ts","state/reducer.ts","state/uiReducer.ts","transit.ts","ui/sidebar/Controls.tsx","state/sidebarActions.ts","ui/SidePanel.tsx","ui/Skeleton.tsx","ui/ResizeablePanel.tsx","ui/size/sizer.ts","ui/paint/Line.tsx","ui/paint/Painter.tsx","ui/PaintManager.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["State","INSERT","INSERT_SMALL","DELETE","CLEAR_HISTORY","NEW","HIGHLIGHT_CHANGE","IMPORT","RESIZE","RESIZE_START","RESIZE_END","PAINT","BEGIN_PAINTING","END_PAINTING","UNDO","REDO","SHOW_TOAST","HIDE_TOAST","style","color","boxSizing","textAlign","background","highlightText","fontWeight","Cell","onMouseover","e","buttons","props","nextProps","this","number","selected","small","size","highlight","ninth","extraStyle","flexBasis","cells","fontSize","height","lineHeight","position","padding","justifyItems","alignItems","inside","getLargeCell","getSmallCell","tryStyle","display","gridTemplateColumns","gridTemplateRows","tabIndex","className","onMouseDown","onClick","shiftKey","onKeyDown","onInput","keyCode","metaKey","onMouseMove","onBlur","map","x","thirdSize","Math","floor","s","gridRow","gridColumn","key","onClickText","Error","ex","Component","onMove","selectedState","setSelected","direction","original","values","next","value","selection","res","Set","add","index","doMove","onDelete","val","shift","meta","onEnterSmallNum","Array","from","onEnterNum","FilteredBoard","connect","main","board","present","settings","boardSize","interact","state","NORMAL","dispatch","num","type","insertCell","insertSmallCell","deleteCell","rowStyle","pointerEvents","flexFlow","width","defaultSelectedCell","useState","highlightState","setHighlight","cell","mainNum","has","focused","undo","history","activeItem","getInitialState","window","location","pathname","startsWith","pushState","defaultState","localStorage","getItem","result","JSON","parse","items","enableHighlight","ui","toast","toastr","toastrs","past","future","rootReducer","combineReducers","undoable","action","idx","newCells","doInsert","validIdx","filter","adding","indexOf","reduce","p","n","forEach","alreadyHas","doInsertSmall","iState","newDeleteCells","doDelete","fill","doClearBoard","i","charAt","isNaN","parseInt","doImport","data","freeze","FROZEN","doResize","subtype","PAINTING","doClearHistory","toastrReducer","store","createStore","composeWithDevTools","applyMiddleware","thunk","subscribe","setItem","stringify","getState","reverse","sparseMap","0","1","2","3","4","5","6","7","encodeFull","cellsFilled","runThrough","length","nextOne","min","filledVals","bn","hex","toString","arr","padEnd","push","substring","b64encoded","btoa","String","fromCharCode","apply","console","log","replace","bnToB64","BigInt","boxStyle","margin","borderRadius","flexGrow","topLeft","borderTopLeftRadius","topRight","borderTopRightRadius","ConnectedControls","painting","full","onNew","onChangeHighlight","onSetHighlight","onChangePainting","onImport","doCheck","a","async","str","join","fetch","resp","text","txt","success","status","info","error","onUndo","ActionCreators","onRedo","redo","addToast","useToasts","Grid","container","Button","disableElevation","variant","response","prompt","onImportClicked","navigator","clipboard","writeText","host","appearance","autoDismiss","doExport","htmlFor","id","checked","onChange","target","ConnectedPanel","boardCells","clearHistory","href","rel","bodyStyle","boardStyle","sidebarStyle","minWidth","minHeight","maxHeight","overflowY","collapse","right","top","borderBottomRightRadius","Skeleton","side","React","PureComponent","ResizePanel","onDrag","onDragStart","onDragEnd","minConstraints","lockAspectRatio","onResize","onResizeStart","onResizeStop","children","getSmallCoordinatesFromXY","y","subcell","xAccrossCell","finalCell","xAccrossSubCell","toCoordinates","coords","largeSize","smallSize","xAccross","yAccross","snapTo","spacing","snap","round","Line","start","end","seen","seenStart","seenEnd","startCoords","endCoords","boxSize","centerStartX","centerStartY","centerEndX","centerEndY","startNode","endNode","midPointX","midPointY","d","stroke","defaultStyle","zIndex","lineStyle","setOngoingLine","ongoingLine","SVGElement","rect","getBoundingClientRect","clientX","left","clientY","onSvgClick","setLineState","lineState","startLine","commitLine","line","lines","setLine","setLines","coord","Paint","ongoing","ConnectedPainter","enabled","painter","App","Mainboard","timeOut","newestOnTop","preventDuplicates","transitionIn","transitionOut","progressBar","closeOnToastrClick","Boolean","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1e858404.chunk.js","sourcesContent":["\nexport type CellState = {\n    mainNum: number | null,\n    small: Array<number>\n}\n\nexport enum State {\n    NORMAL=1,\n    FROZEN=2,\n    PAINTING=3\n}\n\n/**\n * All events must be reversible, events that are supported are\n * ADD of large number\n * REMOVAL of large number\n * ADDITION of small numbers (one by one)\n * REMOVAL of small numbers (one by one)\n * ADDITION of small numbers (in batch)\n * REMOVAL of small numbers (in batch)\n */\nexport type AppEvent  ={\n    kind: 'ADD' | 'REMOVE',\n    index: Array<number>,\n    large?: number,\n    small?: Array<number>,\n}\n\nexport type Settings = {\n    state: State,\n    enableHighlight: boolean,\n    boardSize: number\n}\n\nexport type Link = {\n    start: Coordinate, \n    end: Coordinate,\n}\n\nexport type Coordinate = {\n    cell: number;\n    subcell: number;\n}\n\nexport type PaintState = {\n    links: Array<Link>,\n    paintStart: Coordinate | null,\n}\n\nexport type History = {\n    items: Array<AppEvent>,\n    activeItem: number,\n}\n\nexport type AppState = {\n    history: History,\n}","export const SELECT_CELL = \"SELECT_CELL\";\nexport const INSERT = \"INSERT\";\nexport const INSERT_SMALL = \"INSERT_SMALL\";\nexport const DELETE = \"DELETE\";\nexport const DRAG_CELL = \"DRAG_CELL\";\nexport const BLUR_CELL = \"BLUR_CELL\";\n\nexport const CLEAR_HISTORY = \"CLEAR_HISTORY\";\n\nexport const MOVE = \"MOVE\";\n\nexport const CLICK_TEXT = \"CLICK_TEXT\";\nexport const DOUBLE_CLICK_TEXT = \"DOUBLE_CLICK_TEXT\";\n\nexport const SIDEBAR = \"SIDEBAR\";\nexport const NEW = \"NEW\";\nexport const HIGHLIGHT_CHANGE = \"HIGHLIGHT_CHANGE\";\nexport const IMPORT = \"IMPORT\";\n\nexport const RESIZE = \"RESIZE\";\nexport const RESIZE_START = \"RESIZE_START\";\nexport const RESIZE_END = \"RESIZE_END\";\n\nexport const PAINT = \"PAINT\"\nexport const BEGIN_PAINTING = \"BEGIN_PAINING\"\nexport const END_PAINTING = \"END_PAINING\"\nexport const SEND_COORDINATE = \"SEND_COORD\"\n\nexport const UNDO = \"UNDO\"\nexport const REDO = \"REDO\"\n\nexport const SHOW_TOAST = \"SHOW_TOAST\";\nexport const HIDE_TOAST = \"HIDE_TOAST\";","import {toastr} from 'react-redux-toastr'\nimport {\n  INSERT,\n  INSERT_SMALL,\n  DELETE,\n  DRAG_CELL,\n  BLUR_CELL,\n  MOVE,\n  CLICK_TEXT,\n  NEW,\n  HIGHLIGHT_CHANGE,\n  IMPORT,\n  RESIZE,\n  RESIZE_START,\n  PAINT,\n  RESIZE_END,\n  BEGIN_PAINTING,\n  END_PAINTING,\n  SEND_COORDINATE,\n  CLEAR_HISTORY,\n  UNDO,\n  REDO,\n} from \"./actionTypes\";\nimport { Action } from 'redux';\nimport { Coordinate } from \"./model\";\nimport { ThunkAction } from 'redux-thunk';\nimport { RootState } from \"./store\";\nimport { ShowToastEvent, HideToastEvent, showToast } from \"./uiActions\";\n\nexport type Actions =\n  | InsertEvent\n  | InsertSmallEvent\n  | DeleteEvent\n  | ResizeEvent\n  | HighlightChangeEvent\n  | ImportEvent\n  | CoordinateEvent\n  | PaintEvent\n  | NewEvent\n  | ClearHistoryEvent\n  | HistoryEvent \n  | ShowToastEvent;\n\nexport type CoordinateEvent = {\n  type: typeof SEND_COORDINATE;\n  coordinate: Coordinate;\n};\n\nexport type Direction = \"UP\" | \"DOWN\" | \"LEFT\" | \"RIGHT\";\n\nexport type HistoryEvent = {\n  type: typeof UNDO | typeof REDO\n}\n\nexport type PaintEvent = {\n  type: typeof PAINT;\n  subtype: typeof BEGIN_PAINTING | typeof END_PAINTING;\n};\n\nexport type ImportEvent = {\n  type: typeof IMPORT;\n  value: string;\n};\n\nexport type ClearHistoryEvent = {\n  type: typeof CLEAR_HISTORY;\n}\n\nexport type NewEvent = {\n  type: typeof NEW;\n};\n\nexport type HighlightChangeEvent = {\n  type: typeof HIGHLIGHT_CHANGE;\n  value: boolean;\n};\n\nexport type ClickTextEvent = {\n  type: typeof CLICK_TEXT;\n  index: number;\n  number: number;\n};\n\nexport type MoveEvent = {\n  type: typeof MOVE;\n  direction: Direction;\n};\nexport type BlurEvent = {\n  type: typeof BLUR_CELL;\n  index: number;\n};\nexport type DragCellEvent = {\n  type: typeof DRAG_CELL;\n  index: number;\n};\nexport type InsertSmallEvent = {\n  type: typeof INSERT_SMALL;\n  index: Array<number>;\n  number: number;\n};\nexport type InsertEvent = {\n  type: typeof INSERT;\n  index: number;\n  number: number;\n};\n\nexport type DeleteEvent = {\n  type: typeof DELETE;\n  index: Set<number>;\n};\n\nexport type ResizeEvent =\n  | {\n      type: typeof RESIZE;\n      size: number;\n    }\n  | {\n      type: typeof RESIZE_START | typeof RESIZE_END;\n    };\n\nexport function resize(size: number): ResizeEvent {\n  return {\n    type: RESIZE,\n    size\n  };\n}\n\nexport function insertCell(index: number, number: number): InsertEvent {\n  return {\n    type: INSERT,\n    index,\n    number\n  };\n}\n\nexport function insertSmallCell(\n  index: Array<number>,\n  number: number\n): InsertSmallEvent {\n  return {\n    type: INSERT_SMALL,\n    number,\n    index\n  };\n}\n\nexport function deleteCell(index: Set<number>): DeleteEvent {\n  return {\n    type: DELETE,\n    index\n  };\n}\n\nexport const checkState = (): ThunkAction<void, RootState, unknown, Action<string>> => async (dispatch, getState) => {\n  const state = getState();\n  var str = state.cells.present.cells.map(x => x.mainNum || '0').join('')\n  var resp = await fetch(\"/api/count?sudoku=\" + str)\n  var txt = await resp.text()\n  var success = resp.status == 200\n  if(txt == \"1\") {\n    toastr.info(\"nice\", \"All good big boi\")\n  } else {\n    toastr.error(\"Problem\", \"There are \" + \"\" + \"solutions\" + success)\n  }\n}","import React, { Component } from \"react\";\nimport CSS from \"csstype\";\n\ntype CellProps = {\n  number: number | null;\n  small: Array<number>;\n  cells: number;\n  selected: boolean;\n  focused: boolean;\n  highlight: number | null;\n  size: number;\n  onClick: (meta: boolean) => void;\n  onClickText: (number: number) => void;\n  onInput: (arg0: number, shift: boolean, meta: boolean) => void;\n  onBlur: () => void;\n  onMouseover: () => void;\n};\n\nconst style: CSS.Properties = {\n  color: \"black\",\n  boxSizing: \"border-box\",\n  textAlign: \"center\",\n  background: \"white\",\n};\nconst highlightText: CSS.Properties = {\n  color: \"red\",\n  fontWeight: \"bold\"\n  // background: \"yellow\"\n};\n\nexport class Cell extends Component<CellProps> {\n  shouldComponentUpdate(nextProps: CellProps): boolean {\n    return (\n      this.props.number !== nextProps.number ||\n      this.props.selected !== nextProps.selected ||\n      this.props.small !== nextProps.small ||\n      this.props.size !== nextProps.size ||\n      this.props.highlight !== nextProps.highlight\n    );\n  }\n\n  onMouseover = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (e.buttons && 0x1) {\n      this.props.onMouseover();\n    }\n  };\n\n  render() {\n    const ninth = this.props.size;\n    const extraStyle: CSS.Properties = {\n      ...style,\n      flexBasis: \"calc(100%/\" + this.props.cells + \")\",\n      fontSize: `${ninth - 10}px`,\n      height: `${ninth}px`,\n      lineHeight: `${ninth}px`,\n      position: \"relative\",\n      padding: '2px',\n      justifyItems: 'center',\n      alignItems: 'center',\n      background: this.props.selected ? \"rgba(0,0,255,0.2)\" : \"white\"\n    };\n\n    const inside = this.props.number\n      ? this.getLargeCell()\n      : this.getSmallCell();\n\n    const tryStyle: CSS.Properties = {\n      ...extraStyle,\n      display: 'grid',\n      gridTemplateColumns: '33% 34% 33%',\n      gridTemplateRows: '33% 34% 33%',\n    }\n\n    return (\n      <div\n        tabIndex={0}\n        style={tryStyle}\n        className=\"tile\"\n\n        onMouseDown={e => this.props.onClick(e.shiftKey)}\n        onKeyDown={e => this.props.onInput(e.keyCode, e.shiftKey, e.metaKey)}\n        onMouseMove={this.onMouseover}\n        onBlur={this.props.onBlur}\n      >\n        {inside}\n      </div>\n    );\n  }\n\n  private getSmallCell() {\n    return this.props.small.map(x => {\n      const clickHandler = () => this.props.onClickText(x);\n      const thirdSize = Math.floor(this.props.size / 4);\n      let s: React.CSSProperties = {\n        fontSize: `${thirdSize}px`,\n        height: `${thirdSize}px`,\n        lineHeight: `${thirdSize}px`,\n        gridRow: `${Math.floor((x-1)/3) + 1}`,\n        gridColumn: ((x-1)%3) + 1,\n      };\n      if (this.props.highlight === x) {\n        s = {\n          ...s,\n          ...highlightText\n        };\n      }\n      return (\n        <div key={x} style={s} className=\"smallContent\" onClick={clickHandler}>\n          {x}\n        </div>\n      );\n    });\n  }\n\n  private getLargeCell() {\n    if (this.props.number == null) {\n      throw Error();\n    }\n    const clickHandler = () =>\n      this.props.number && this.props.onClickText(this.props.number);\n    const highlight = this.props.highlight === this.props.number;\n    const style = highlight ? highlightText : {};\n    const ex = {\n      ...style,\n      gridRow: '1/4',\n      gridColumn: '1/4',\n    }\n    return (\n      <div className=\"content\" onClick={clickHandler} style={ex}>\n        {this.props.number}\n      </div>\n    );\n  }\n}\n","import React, { Dispatch, useState } from \"react\";\nimport { CellState, State } from \"../state/model\";\nimport CSS from \"csstype\";\nimport {\n  insertCell,\n  insertSmallCell,\n  Actions,\n  deleteCell,\n  Direction\n} from \"../state/cellActions\";\nimport { connect } from \"react-redux\";\nimport { Cell } from \"./Cell\";\nimport { RootState } from \"../state/store\";\n\ntype BoardProps = {\n  board: Array<CellState>;\n  size: number;\n  interact: boolean;\n  onEnterNum: (index: number, num: number) => void;\n  onEnterSmallNum: (index: Array<number>, num: number) => void;\n  onDelete: (index: Set<number>) => void;\n};\n\nconst onMove = (\n  selectedState: Set<number>,\n  setSelected: Dispatch<React.SetStateAction<Set<number>>>\n) => {\n  return (direction: Direction) => {\n    if (selectedState.size !== 1) {\n      return;\n    }\n\n    let original = selectedState.values().next().value;\n    let selection = original;\n    switch (direction) {\n      case \"UP\":\n        selection -= 9;\n        break;\n      case \"DOWN\":\n        selection += 9;\n        break;\n      case \"LEFT\":\n        selection -= 1;\n        break;\n      case \"RIGHT\":\n        selection += 1;\n        break;\n    }\n    if (selection <= -1) selection = original;\n    if (selection >= 81) selection = original;\n    const res: Set<number> = new Set();\n    res.add(selection);\n    setSelected(res);\n  };\n};\n\nconst onInput = (\n  index: number,\n  selectedState: Set<number>,\n  doMove: (d: Direction) => void,\n  onDelete: (idx: Set<number>) => void,\n  props: BoardProps\n) => {\n  return (val: number, shift: boolean, meta: boolean) => {\n    if (val === 46 || val === 8) {\n      return onDelete(selectedState);\n    }\n    if(meta) {\n      return;\n    }\n    if ((val >= 49 && val <= 57) || (val >= 97 && val <= 105)) {\n      // we have a number entered. Lets quickly normalize the numpad\n      if (val > 57) {\n        val -= 48;\n      }\n      val -= 48;\n      if (!shift && selectedState.size === 1) {\n        props.onEnterNum(selectedState.values().next().value, val);\n      } else if (shift) {\n        props.onEnterSmallNum(Array.from(selectedState), val);\n      }\n    } else if (val === 8 || val === 46) {\n      return onDelete(selectedState);\n    }\n    if (selectedState.size === 1) {\n      if (val === 38) {\n        return doMove(\"UP\");\n      } else if (val === 37) {\n        return doMove(\"LEFT\");\n      } else if (val === 40) {\n        return doMove(\"DOWN\");\n      } else if (val === 39) {\n        return doMove(\"RIGHT\");\n      }\n    }\n  };\n};\n\ntype Highlight = number | null;\n\nexport const BoardUI = (props: BoardProps) => {\n  const rowStyle: CSS.Properties = {\n    display: \"flex\",\n    pointerEvents: \"all\",\n    flexFlow: \"row wrap\",\n    width: `${props.size}px`,\n    lineHeight: `${props.size}px`\n  };\n  const { interact } = props;\n  const defaultSelectedCell: Set<number> = new Set();\n  const [selectedState, setSelected] = useState(defaultSelectedCell);\n  const [highlightState, setHighlight] = useState<Highlight>(null);\n\n  const board = props.board;\n  let cells = board.map((cell, index) => {\n    const onDrag = () => {\n      if (!interact) {\n        return;\n      }\n      const res = new Set(selectedState);\n      res.add(index);\n      setSelected(res);\n    };\n    const onBlur = () => {\n      if (!interact) {\n        return;\n      }\n      setHighlight(null);\n    };\n    const onClickText = (val: number) => {\n      if (!interact) {\n        return;\n      }\n      setHighlight(val);\n    };\n    const select = (meta: boolean) => {\n      if (!interact) {\n        return;\n      }\n      if (!meta) {\n        const res: Set<number> = new Set();\n        res.add(index);\n        setSelected(res);\n      } else {\n        const res = new Set(selectedState);\n        res.add(index);\n        setSelected(res);\n      }\n    };\n    return (\n      <Cell\n        key={index}\n        number={cell.mainNum}\n        small={cell.small}\n        cells={9}\n        size={props.size / 9}\n        highlight={highlightState}\n        selected={selectedState.has(index)}\n        focused={selectedState.has(index) && selectedState.size === 1}\n        onClickText={onClickText}\n        onClick={select}\n        onBlur={onBlur}\n        onInput={onInput(\n          index,\n          selectedState,\n          onMove(selectedState, setSelected),\n          props.onDelete,\n          props\n        )}\n        onMouseover={onDrag}\n      />\n    );\n  });\n  return (\n    <div tabIndex={1} className=\"box\" style={rowStyle} >\n      {cells}\n    </div>\n  );\n};\n\nconst mapStateToProps = (main: RootState) => {\n  return {\n    board: main.cells.present.cells,\n    size: main.settings.boardSize,\n    interact: main.settings.state === State.NORMAL\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<Actions>) => {\n  return {\n    onEnterNum: (index: number, num: number) => {\n      dispatch(insertCell(index, num));\n    },\n    onEnterSmallNum: (index: Array<number>, num: number) => {\n      dispatch(insertSmallCell(index, num));\n    },\n    onDelete: (index: Set<number>) => {\n      dispatch(deleteCell(index));\n    }\n  };\n};\n\nexport const FilteredBoard = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(BoardUI);\n","import { AppState } from \"./model\";\n\nexport function undo(state: AppState) : AppState {\n    return {\n        ...state, \n        history: {\n            ...state.history,\n            activeItem: state.history.activeItem - 1\n        }\n    }\n}\n\nexport function redo(state: AppState) : AppState {\n    return state;\n}\n","import { State } from \"./model\";\nimport { RootState } from \"./store\";\n\nexport function getInitialState(): RootState {\n  if (window.location.pathname.startsWith(\"/share/\")) {\n    // let path = window.location.pathname.substring(\"/share/\".length)\n    window.history.pushState({}, \"Sudoku UI\", \"/\")\n    return {\n      ...defaultState,\n    }\n  }\n  let res = localStorage.getItem('state');\n  if (res != null) {\n    const result = JSON.parse(res);\n    if (result.cells.present == null) {\n      return {\n        ...defaultState,\n      }\n    } else {\n      return {\n        ...result\n      }\n    }\n  }\n  return {\n    ...defaultState,\n  }\n}\n\nexport const defaultState: RootState = {\n  main: {\n    history: {\n      items: [],\n      activeItem: -1,\n    }\n  },\n  // paintState: {\n  //   links: [],\n  //   paintStart: null,\n  // },\n  settings: {\n    state: State.NORMAL,\n    enableHighlight: false,\n    boardSize: 450,\n  },\n  ui: {\n    toast: null,\n  },\n  toastr: {\n    toastrs: []\n  },\n  cells: {\n    past: [],\n    future: [],\n    present: {\n      cells: [\n        {\n          mainNum: 9,\n          small: []\n        },\n        {\n          mainNum: null,\n          small: [2, 1, 3]\n        },\n        {\n          mainNum: null,\n          small: [2, 1, 3]\n        },\n        {\n          mainNum: null,\n          small: [4, 6, 1]\n        },\n        {\n          mainNum: 5,\n          small: []\n        },\n        {\n          mainNum: null,\n          small: [4, 1, 7]\n        },\n        {\n          mainNum: null,\n          small: [3, 7]\n        },\n        {\n          mainNum: 8,\n          small: []\n        },\n        {\n          mainNum: null,\n          small: [6, 1, 7]\n        },\n        {\n          mainNum: null,\n          small: [1, 3, 5]\n        },\n        {\n          mainNum: 4,\n          small: [4]\n        },\n        {\n          mainNum: 8,\n          small: []\n        },\n        {\n          mainNum: null,\n          small: [6, 1, 2]\n        },\n        {\n          mainNum: null,\n          small: [2, 7]\n        },\n        {\n          mainNum: null,\n          small: [1, 2, 7]\n        },\n        {\n          mainNum: 9,\n          small: []\n        },\n        {\n          mainNum: null,\n          small: [3, 5, 1]\n        },\n        {\n          mainNum: null,\n          small: [6, 1, 7]\n        },\n        {\n          mainNum: null,\n          small: [7, 1, 5]\n        },\n        {\n          mainNum: 6,\n          small: [6]\n        },\n        {\n          mainNum: null,\n          small: [7, 1, 5]\n        },\n        {\n          mainNum: 3,\n          small: []\n        },\n        {\n          mainNum: null,\n          small: [8, 9]\n        },\n        {\n          mainNum: null,\n          small: [8, 9]\n        },\n        {\n          mainNum: 2,\n          small: []\n        },\n        {\n          mainNum: null,\n          small: [5, 1]\n        },\n        {\n          mainNum: 4,\n          small: []\n        },\n        {\n          mainNum: null,\n          small: [1, 8]\n        },\n        {\n          mainNum: null,\n          small: [1, 2, 3, 8]\n        },\n        {\n          mainNum: null,\n          small: [1, 2, 3]\n        },\n        {\n          mainNum: 7,\n          small: []\n        },\n        {\n          mainNum: null,\n          small: [9, 2, 4, 8]\n        },\n        {\n          mainNum: null,\n          small: [1, 9, 2, 4, 8]\n        },\n        {\n          mainNum: null,\n          small: [3, 4]\n        },\n        {\n          mainNum: 6,\n          small: []\n        },\n        {\n          mainNum: 5,\n          small: []\n        },\n        {\n          mainNum: null,\n          small: [7, 5, 3, 8]\n        },\n        {\n          mainNum: null,\n          small: [7, 2, 3, 8]\n        },\n        {\n          mainNum: 6,\n          small: []\n        },\n        {\n          mainNum: null,\n          small: [5, 2, 4, 8]\n        },\n        {\n          mainNum: null,\n          small: [2, 4, 8]\n        },\n        {\n          mainNum: null,\n          small: [2, 4, 8]\n        },\n        {\n          mainNum: 1,\n          small: []\n        },\n        {\n          mainNum: null,\n          small: [3, 4]\n        },\n        {\n          mainNum: 9,\n          small: []\n        },\n        {\n          mainNum: 4,\n          small: []\n        },\n        {\n          mainNum: 9,\n          small: []\n        },\n        {\n          mainNum: null,\n          small: [5, 1]\n        },\n        {\n          mainNum: null,\n          small: [1, 5]\n        },\n        {\n          mainNum: 6,\n          small: [6]\n        },\n        {\n          mainNum: 3,\n          small: []\n        },\n        {\n          mainNum: null,\n          small: [7, 8]\n        },\n        {\n          mainNum: 2,\n          small: [2]\n        },\n        {\n          mainNum: null,\n          small: [7, 8]\n        },\n        {\n          mainNum: 2,\n          small: []\n        },\n        {\n          mainNum: null,\n          small: [3, 7, 8]\n        },\n        {\n          mainNum: 9,\n          small: []\n        },\n        {\n          mainNum: null,\n          small: [4, 7, 8]\n        },\n        {\n          mainNum: null,\n          small: [3, 4, 7, 8]\n        },\n        {\n          mainNum: 6,\n          small: []\n        },\n        {\n          mainNum: 5,\n          small: [5]\n        },\n        {\n          mainNum: null,\n          small: [1, 4]\n        },\n        {\n          mainNum: null,\n          small: [1, 8]\n        },\n        {\n          mainNum: null,\n          small: [1, 3, 8]\n        },\n        {\n          mainNum: null,\n          small: [1, 3, 8]\n        },\n        {\n          mainNum: 4,\n          small: []\n        },\n        {\n          mainNum: 9,\n          small: [5]\n        },\n        {\n          mainNum: null,\n          small: [3, 8]\n        },\n        {\n          mainNum: 5,\n          small: [5]\n        },\n        {\n          mainNum: 6,\n          small: []\n        },\n        {\n          mainNum: 7,\n          small: []\n        },\n        {\n          mainNum: 2,\n          small: [2]\n        },\n        {\n          mainNum: 6,\n          small: []\n        },\n        {\n          mainNum: 5,\n          small: []\n        },\n        {\n          mainNum: null,\n          small: [7, 8]\n        },\n        {\n          mainNum: null,\n          small: [2, 4, 7, 8]\n        },\n        {\n          mainNum: 1,\n          small: []\n        },\n        {\n          mainNum: null,\n          small: [2, 4, 7, 8]\n        },\n        {\n          mainNum: null,\n          small: [4, 8]\n        },\n        {\n          mainNum: 9,\n          small: [2]\n        },\n        {\n          mainNum: 3,\n          small: []\n        }\n      ]\n    }\n  },\n};\n","import { AppReducer } from \"./reducer\";\nimport { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport undoable from 'redux-undo';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { cellReducer } from './cellReducer'\nimport { settingsReducer } from './settingsReducer'\nimport {reducer as toastrReducer} from 'react-redux-toastr'\nimport { UIReducer } from \"./uiReducer\";\n\nconst rootReducer = combineReducers({\n    cells: undoable(cellReducer),\n    settings: settingsReducer,\n    main: AppReducer,\n    ui: UIReducer,\n    toastr: toastrReducer,\n  })\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk,))//composeWithDevTools(),\n);\nexport type RootState = ReturnType<typeof rootReducer>;\n\nstore.subscribe(\n  () => localStorage.setItem(\"state\", JSON.stringify(store.getState())));","import { CellState } from \"./model\";\nimport { InsertEvent, InsertSmallEvent, DeleteEvent, NewEvent, ImportEvent } from \"./cellActions\";\nimport { INSERT, INSERT_SMALL, DELETE, NEW, IMPORT } from \"./actionTypes\";\nimport { getInitialState } from \"./default\";\n\nexport type WholeCellState = {\n    cells: Array<CellState>\n}\n\nexport type CellActions = InsertEvent | InsertSmallEvent | DeleteEvent | NewEvent | ImportEvent;\n\nexport function cellReducer(state:WholeCellState = getInitialState().cells.present, action: CellActions): WholeCellState {\n    switch (action.type) {\n        case INSERT:\n            return doInsert(state, action.index, action.number);\n        case INSERT_SMALL:\n            return doInsertSmall(state, action);\n        case DELETE:\n            return doDelete(state, action);\n        case NEW:\n            return doClearBoard(state)\n        case IMPORT:\n            return doImport(state, action.value)\n        default:\n            return state;\n    }\n}\n\nfunction doClearBoard(state: WholeCellState): WholeCellState {\n    const newCells = new Array(81).fill({ mainNum: null, small: [] });\n    return {\n        ...state,\n        cells: newCells,\n    };\n}\n\nfunction doInsert(state: WholeCellState, idx: number, value: number): WholeCellState {\n    // only works with a single selection\n    const newCells = [...state.cells];\n    const cell = newCells[idx];\n\n    if (cell.mainNum === value) {\n        // no op\n        return state;\n    }\n\n    newCells[idx] = { ...cell, mainNum: value };\n    return { ...state, cells: newCells };\n}\n\nfunction doInsertSmall(state: WholeCellState, action: InsertSmallEvent): WholeCellState {\n    const cells = [...state.cells];\n    const validIdx = action.index.filter(x => cells[x].mainNum == null)\n    const adding = validIdx\n        .map(x => cells[x].small.indexOf(action.number) === -1)\n        .reduce((p, n) => p || n, false);\n\n    validIdx.forEach(index => {\n        const alreadyHas = cells[index].small.indexOf(action.number) !== -1;\n        if (adding && !alreadyHas) {\n            cells[index] = {\n                ...cells[index],\n                small: [...cells[index].small, action.number]\n            };\n        } else if (!adding && alreadyHas) {\n            cells[index] = {\n                ...cells[index],\n                small: cells[index].small.filter(s => s !== action.number)\n            };\n        }\n    });\n    return {\n        ...state,\n        cells: [...cells],\n    };\n}\n\nfunction doDelete(state: WholeCellState, action: DeleteEvent) {\n    let iState = [...state.cells];\n    //   let historyItem: Array<AppEvent> = [];\n    action.index.forEach(idx => {\n        let deleteCell = state.cells[idx];\n        const newDeleteCells = [...iState];\n        if (deleteCell.mainNum == null) {\n            deleteCell = {\n                ...deleteCell,\n                small: []\n            };\n        } else {\n            deleteCell = {\n                ...deleteCell,\n                mainNum: null\n            };\n        }\n        newDeleteCells[idx] = deleteCell;\n        iState = [...newDeleteCells];\n    });\n    return {\n        ...state,\n        cells: iState,\n    };\n}\n\nfunction doImport(state: WholeCellState, value: string): WholeCellState {\n    let cells = new Array(81);\n    for (let i = 0; i < 81; i++) {\n        if (value.charAt(i) !== \"0\" && !isNaN(parseInt(value.charAt(i)))) {\n            cells[i] = { mainNum: parseInt(value.charAt(i)), small: [] };\n        } else {\n            cells[i] = { mainNum: null, small: [] };\n        }\n    }\n    return {\n        ...state,\n        cells\n    };\n}","import { ResizeEvent, PaintEvent } from \"./cellActions\";\nimport { RESIZE_START, RESIZE, RESIZE_END, PAINT } from \"./actionTypes\";\nimport { State } from \"./model\";\nimport { getInitialState } from \"./default\";\n\nexport type SettingsActions = ResizeEvent | PaintEvent;\n\nexport type SettingsState = {\n    state: State,\n    boardSize: number,\n    enableHighlight: boolean,\n}\n\nexport function settingsReducer(state:SettingsState = {...getInitialState().settings}, action: SettingsActions): SettingsState {\n    switch (action.type) {\n        case RESIZE:\n        case RESIZE_START:\n        case RESIZE_END:\n            return doResize(state, action)\n        case PAINT:\n            switch (action.subtype) {\n                case \"BEGIN_PAINING\":\n                    return {\n                        ...state,\n                        state: State.PAINTING\n                    }\n                case \"END_PAINING\":\n                    return {\n                        ...state,\n                        state: State.NORMAL\n                    }\n                    default:\n                        return state;\n            }\n        default:\n            return state;\n    }\n}\n\nfunction doResize(state: SettingsState, data: ResizeEvent): SettingsState {\n    if (data.type === RESIZE) {\n        return {\n            ...state,\n            boardSize: data.size\n        };\n    }\n    const freeze = data.type === RESIZE_START;\n    return {\n        ...state,\n        state: freeze ? State.FROZEN : State.NORMAL\n    };\n}","import { AppState, State } from \"./model\";\nimport {\n  Actions,\n} from \"./cellActions\";\nimport {\n  RESIZE,\n  RESIZE_START,\n  RESIZE_END,\n  CLEAR_HISTORY,\n  UNDO,\n  REDO\n} from \"./actionTypes\";\nimport { undo } from \"./undoredo\";\n\nconst validStateAction = (state: State, action: Actions) => {\n  switch (state) {\n    case State.NORMAL:\n      // All things can happen when state is normal\n      return true;\n    case State.FROZEN:\n      return (\n        action.type === RESIZE ||\n        action.type === RESIZE_END ||\n        action.type === RESIZE_START\n      );\n  }\n  return true;\n};\n\nexport function AppReducer (\n  state: AppState = {history: {\n    activeItem: -1, items: []\n  }},\n  action: Actions\n): AppState {\n  switch (action.type) {\n    case CLEAR_HISTORY: \n      return doClearHistory(state);\n    case UNDO:\n      return undo(state)\n    case REDO:\n      return undo(state)\n    default:\n      return state;\n  }\n}\n\nfunction doClearHistory(state: AppState) : AppState {\n  return {\n    ...state,\n    history: {\n      items: [],\n      activeItem: -1\n    }\n  }\n}\n","import { ShowToastEvent, HideToastEvent } from \"./uiActions\";\nimport { SHOW_TOAST, HIDE_TOAST } from \"./actionTypes\";\n\nexport type UIState = {\n    toast: String | null,\n}\n\nexport type UIAction = ShowToastEvent | HideToastEvent;\n\nexport function UIReducer(state: UIState = { toast: null }, action: UIAction) {\n    switch (action.type) {\n        case SHOW_TOAST:\n        case HIDE_TOAST:\n            return state;\n\n        default: return state;\n    }\n}","import { CellState } from './state/model'\nimport { WholeCellState } from './state/cellReducer'\n\nconst huff: Record<string, number> = {\n    '000': 0,\n    '1111': 1,\n    '001': 2,\n    '010': 3,\n    '011': 4,\n    '100': 5,\n    '101': 6,\n    '1100': 7,\n    '1101': 8,\n    '1110': 9,\n}\n\nconst reverse: Record<string, string> = {\n    '0': '000',\n    '1': '1111',\n    '2': '001',\n    '3': '010',\n    '4': '011',\n    '5': '100',\n    '6': '101',\n    '7': '1100',\n    '8': '1101',\n    '9': '1110',\n}\n\nconst sparseMap: Record<number, string> = {\n    0: '000',\n    1: '001',\n    2: '010',\n    3: '011',\n    4: '100',\n    5: '101',\n    6: '110',\n    7: '111',\n}\n\nexport function encodeFull(cells: CellState[]) {\n    // algo 2 start\n    const cellsFilled = cells.map(x => x.mainNum == null ? 0 : 1)\n    let runThrough = \"\";\n    let i = 0;\n    while (i < cellsFilled.length) {\n        // if this is a one, add it\n        if (cellsFilled[i] === 1) {\n            runThrough += sparseMap[0]\n            i++;\n        } else {\n            // how many zeros in a row\n            if (cellsFilled.indexOf(1, i) === -1) {\n                // there are no more cells filled. Pick the largest possible\n                let nextOne = Math.min(7, cellsFilled.length - i)\n                runThrough += sparseMap[nextOne]\n                i += nextOne\n            } else {\n                let nextOne = Math.min(cellsFilled.indexOf(1, i), 7)\n                runThrough += sparseMap[nextOne]\n                i += nextOne\n            }\n        }\n        // something went wrong\n        if (i > 90) {\n            break;\n        }\n    }\n    const filledVals = cells.filter(x => x.mainNum != null)\n        .map(x => x.mainNum)\n        .map(x => reverse[\"\" + x])\n        .reduce((p, n) => p + n, \"\")\n    const val2 = BigInt(\"0b\" + runThrough + filledVals)\n    // algo 2 end\n    return bnToB64(val2)\n};\n\nfunction bnToB64(bn: BigInt) {\n    let hex = bn.toString(2);\n    let arr = []\n    if (hex.length % 8 > 0) {\n        hex = hex.padEnd(hex.length + (8 - (hex.length % 8)), \"0\")\n    }\n    for (var i = 0; i < hex.length / 8; i++) {\n        arr.push(hex.substring(i * 8, i * 8 + 8))\n    }\n    var b64encoded = btoa(String.fromCharCode.apply(null, arr.map(x => parseInt(x, 2))));\n    console.log(b64encoded)\n\n    return b64encoded.replace(/\\//g, \"-\").replace(/\\+/g, \"_\").replace(/=/g, \"\")\n}\n\nexport function importFull(board: string): WholeCellState {\n    console.log(atob(board.replace(/-/g, \"/\")))\n    const res = (BigInt(\"0x\" + board).toString(2))\n    const arr = new Array(81);\n    let idx = 0;\n    let s = ''\n    let boardidx = 0;\n    while (idx < 81) {\n        s = s + res.charAt(boardidx)\n        boardidx++;\n        if (huff[s] !== undefined) {\n            arr[idx++] = {\n                mainNum: huff[s],\n                small: []\n            }\n            s = ''\n        }\n    }\n    return { cells: arr };\n}","import React, { Dispatch } from \"react\";\nimport { encodeFull } from \"../../transit\";\nimport { connect } from \"react-redux\";\nimport { State, Settings } from \"../../state/model\";\nimport { Actions, checkState } from \"../../state/cellActions\";\nimport { Grid, Button } from \"@material-ui/core\";\nimport CSS from \"csstype\";\nimport { useToasts } from \"react-toast-notifications\";\nimport {\n  onNew,\n  onSetHighlight,\n  onChangePainting,\n  onImport,\n} from \"../../state/sidebarActions\";\nimport { ActionCreators } from \"redux-undo\";\nimport { RootState } from \"../../state/store\";\n\n// const buttonWidth = 33;\n// const cellStyle: CSS.Properties = {\n//   boxSizing: \"border-box\",\n//   background: \"white\",\n//   height: buttonWidth + \"px\",\n//   width: buttonWidth + \"px\",\n//   border: \"1px solid black\",\n//   lineHeight: buttonWidth + \"px\",\n//   fontSize: buttonWidth / 1.2 + \"px\"\n// };\n\nconst boxStyle: CSS.Properties = {\n  margin: \"0px\",\n  borderRadius: \"0\",\n  background: '#f2f2f2',\n  boxSizing: \"border-box\",\n  flexGrow: 1,\n};\nconst topLeft: CSS.Properties = {\n  borderTopLeftRadius: \"10px\",\n};\nconst topRight: CSS.Properties = {\n  borderTopRightRadius: \"10px\",\n};\n\nconst onImportClicked = (doImport: (e1: string) => void) => {\n  const response = window.prompt(\"Please enter the sodoku: \");\n  if (response !== null) {\n    doImport(response);\n  }\n};\n\nconst doExport = (addToast: any, board: () => string) => {\n  navigator.clipboard.writeText(window.location.host + \"/share/\" + board());\n  addToast(\"URL copied to clipboard\", {\n    appearance: \"info\",\n    autoDismiss: true\n  });\n};\n\ntype ControlProps = {\n  painting: boolean;\n  settings: Settings;\n\n  full: () => string;\n  onNew: () => void;\n  onChangeHighlight: (e1: boolean) => void;\n  onChangePainting: (e1: boolean) => void;\n  doImport: (board: string) => void;\n  onUndo: () => void;\n  doCheck: () => void;\n  onRedo: () => void;\n};\n\nconst Controls = (props: ControlProps) => {\n  const { addToast } = useToasts();\n  // const vfun = (e: any) => { };\n  // const vof = () => { };\n\n  return (\n    <>\n      <Grid container>\n        <Button\n          disableElevation\n          style={{ ...boxStyle, ...topLeft }}\n          variant=\"outlined\"\n          onClick={props.onNew}\n        >\n          New\n        </Button>\n        <Button\n          disableElevation\n          style={boxStyle}\n          variant=\"outlined\"\n          onClick={e => onImportClicked(props.doImport)}\n        >\n          Import\n        </Button>\n        <Button\n          disableElevation\n          style={{ ...boxStyle, ...topRight }}\n          variant=\"outlined\"\n          onClick={() => doExport(addToast, props.full)}\n        >\n          Share\n        </Button>\n                <Button\n          disableElevation\n          style={{ ...boxStyle, ...topRight }}\n          variant=\"outlined\"\n          onClick={() => props.doCheck()}\n        >\n          Check\n        </Button>\n      </Grid>\n      <Grid container>\n        <Button\n          disableElevation\n          style={{ ...boxStyle }}\n          variant=\"outlined\"\n          onClick={() => props.onUndo()}\n        >Undo</Button>\n        <Button\n          disableElevation\n          style={{ ...boxStyle }}\n          variant=\"outlined\"\n          onClick={() => props.onRedo()}>Redo</Button>\n      </Grid>\n      {/* <Grid>\n        <Button variant=\"outlined\" style={boxStyle} disableElevation>\n          <span style={cellStyle}>\n            <div>1</div>\n          </span>\n        </Button>\n        <Button variant=\"outlined\" style={boxStyle} disableElevation>\n          <Cell\n            number={null}\n            small={[1, 2, 3, 4, 5, 6, 7, 8, 9]}\n            selected={false}\n            focused={false}\n            size={buttonWidth}\n            cells={1}\n            highlight={null}\n            onClick={vfun}\n            onClickText={vfun}\n            onBlur={vof}\n            onMouseover={vof}\n            onInput={vfun}\n          />\n        </Button>\n      </Grid> */}\n      <div>\n        <label htmlFor=\"painting\">Enable Painting</label>\n        <input\n          id=\"painting\"\n          type=\"checkbox\"\n          checked={props.painting}\n          onChange={e => props.onChangePainting(e.target.checked)}\n        />\n      </div>\n    </>\n  );\n};\n\nconst mapStateToProps = (main: RootState) => ({\n  painting: main.settings.state === State.PAINTING,\n  settings: main.settings,\n  full: () => encodeFull(main.cells.present.cells)\n});\n\nconst mapDispatchToProps = (dispatch: any) => ({\n  onNew: () => dispatch(onNew()),\n  onChangeHighlight: (value: boolean) => dispatch(onSetHighlight(value)),\n  onChangePainting: (value: boolean) => dispatch(onChangePainting(value)),\n  doImport: (value: string) => dispatch(onImport(value)),\n  doCheck: () => dispatch(checkState()),\n  onUndo: () => dispatch(ActionCreators.undo()),\n  onRedo: () => dispatch(ActionCreators.redo()),\n});\n\nexport const ConnectedControls = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Controls);\n","import { HighlightChangeEvent, ImportEvent, PaintEvent, ClearHistoryEvent, HistoryEvent, NewEvent } from \"./cellActions\";\nimport { NEW, HIGHLIGHT_CHANGE, IMPORT, BEGIN_PAINTING, END_PAINTING, PAINT, CLEAR_HISTORY, UNDO, REDO } from \"./actionTypes\";\n\nexport function onNew() :NewEvent{\n    return {\n        type: NEW, \n    }\n}\n\nexport function onSetHighlight(value: boolean): HighlightChangeEvent {\n    return {\n        type: HIGHLIGHT_CHANGE,\n        value,\n    }\n}\n\nexport function onImport(value: string): ImportEvent {\n    return {\n        type: IMPORT,\n        value }\n}\n\nexport function onChangePainting(value: boolean): PaintEvent {\n    return {\n        type: PAINT,\n        subtype: value ? BEGIN_PAINTING: END_PAINTING,\n    }\n}\nexport function clearEvents(): ClearHistoryEvent {\n    return {\n        type: CLEAR_HISTORY,\n    }\n}\n\nexport function onUndo(): HistoryEvent {\n    return {\n        type: UNDO\n    }\n}\n\nexport function onRedo(): HistoryEvent {\n    return {\n        type: REDO\n    }\n}","import React, { Dispatch } from \"react\";\nimport { connect } from \"react-redux\";\nimport { CellState } from \"../state/model\";\nimport {\n  clearEvents\n} from \"../state/sidebarActions\";\nimport { Actions } from \"../state/cellActions\";\nimport { RootState } from '../state/store';\nimport { ConnectedControls } from \"./sidebar/Controls\";\nimport { WholeCellState } from \"../state/cellReducer\";\n\ntype SidebarProps = {\n  board: string;\n  boardCells: Array<CellState>;\n\n  clearHistory: () => void;\n};\n\n\nconst Sidebar = (props: SidebarProps) => {\n\n  return (\n    <div>\n      <ConnectedControls />\n\n      {/* <h5>Saved Boards</h5>\n      <Button variant=\"contained\" color=\"primary\">\n        Save\n      </Button> */}\n      {/* <BoardUI\n        board={props.boardCells}\n        interact={false}\n        size={200}\n        onEnterNum={vfun}\n        onEnterSmallNum={vfun}\n        onDelete={vfun}\n      /> */}\n      {/* <h5>History <LayersClearIcon onClick={props.clearHistory}/></h5> */}\n      {/* <History /> */}\n      <h5>External resources</h5>\n      <a\n        href={\"https://www.sudokuwiki.org/sudoku.html?db=\" + props.board}\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        Sudoku Wiki\n      </a>\n    </div>\n  );\n};\n\nconst encodeBoard = (cells: WholeCellState) => {\n  return cells.cells.map(x => x.mainNum || \"0\").reduce((p, n) => p + n, \"\");\n};\n\nconst mapStateToProps = (main: RootState) => {\n  return {\n    board: encodeBoard(main.cells.present),\n    boardCells: main.cells.present.cells,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<Actions>) => {\n  return {\n    clearHistory: () => dispatch(clearEvents()),\n  };\n};\n\nexport const ConnectedPanel = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Sidebar);\n","import React from \"react\";\nimport CSS from \"csstype\";\n\nexport type SkeletonProps = {\n  board: JSX.Element;\n  side: JSX.Element;\n};\n\nconst bodyStyle: CSS.Properties = {\n  display: \"flex\",\n  height: \"100vh\"\n};\n\nconst boardStyle: CSS.Properties = {\n  position: \"relative\",\n  margin:'auto',\n  padding: \"20px\"\n};\n\nconst sidebarStyle: CSS.Properties = {\n  position: 'relative',\n  padding: \"20px\",\n  width: \"22%\",\n  minWidth: \"270px\",\n  minHeight: '100vh',\n  maxHeight: '100vh',\n  overflowY: 'scroll'\n};\n\nconst collapse: CSS.Properties = {\n  right: '-15px',\n  top: '50vh',\n  display: 'none',\n  position: 'absolute',\n  padding: '10px',\n  borderTopRightRadius: '15px',\n  borderBottomRightRadius: '15px'\n}\n\nconst rel: CSS.Properties = {\n  position: 'relative'\n}\n\nexport class Skeleton extends React.PureComponent<SkeletonProps> {\n  render() {\n    return (\n      <div style={bodyStyle}>\n        <div style={rel}>\n          <span style={collapse}>X</span>\n          <div style={sidebarStyle}>\n            {this.props.side}\n          </div>\n        </div>\n        <div style={boardStyle}>{this.props.board}</div>\n      </div>\n    );\n  }\n}\n","import React, { Dispatch, SyntheticEvent } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Actions, resize } from \"../state/cellActions\";\nimport { ResizableBox, ResizeCallbackData } from \"react-resizable\";\nimport { RESIZE_START, RESIZE_END } from \"../state/actionTypes\";\nimport { RootState } from \"../state/store\";\n\ntype ResizePanelProps = {\n  size: number;\n  children: Array<JSX.Element>;\n  onDrag: (arg0: SyntheticEvent, data: ResizeCallbackData) => void;\n  onDragStart: (arg0: SyntheticEvent, data: ResizeCallbackData) => void;\n  onDragEnd: (arg0: SyntheticEvent, data: ResizeCallbackData) => void;\n};\n\nfunction ResizePanelUI(props: ResizePanelProps): JSX.Element {\n  return (\n    <ResizableBox\n      width={props.size}\n      height={props.size}\n      minConstraints={[400, 400]}\n      lockAspectRatio={true}\n      onResize={props.onDrag}\n      onResizeStart={props.onDragStart}\n      onResizeStop={props.onDragEnd}\n    >\n      {props.children}\n    </ResizableBox>\n  );\n}\n\nconst mapStateToProps = (main: RootState) => {\n  return {\n    size: main.settings.boardSize\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<Actions>) => {\n    return {\n        onDrag: (e: SyntheticEvent, data: ResizeCallbackData) => {\n            dispatch(resize(data.size.width))\n        },\n        onDragStart: (e: SyntheticEvent, data: ResizeCallbackData) => {\n            dispatch({\n                type: RESIZE_START\n            })\n        },\n        onDragEnd: (e: SyntheticEvent, data: ResizeCallbackData) => {\n            dispatch({\n                type: RESIZE_END\n            })\n        }\n    }\n}\n\nexport const ResizePanel = connect(mapStateToProps, mapDispatchToProps)(ResizePanelUI);\n","import { Coordinate } from \"../../state/model\";\n\nexport const getSmallCoordinatesFromXY = (\n  size: number,\n  x: number,\n  y: number\n): Coordinate => {\n  const cell = size / 9;\n  const subcell = cell / 3;\n  const xAccrossCell = Math.floor(x / cell);\n  const yAccrossCell = Math.floor(y / cell);\n  const finalCell = yAccrossCell * 9 + xAccrossCell;\n\n  const xAccrossSubCell = Math.floor((x / subcell) % 3);\n  const yAccrossSubCell = Math.floor((y / subcell) % 3);\n  const finalSub = yAccrossSubCell * 3 + xAccrossSubCell;\n  return {\n    cell: finalCell,\n    subcell: finalSub\n  };\n};\n\nexport const toCoordinates = (size: number, coords: Coordinate) => {\n  const { cell, subcell } = coords;\n  const largeSize = size / 9;\n  const smallSize = largeSize / 3;\n  // to find out the X we need the cell mod 9\n  let xAccross = (cell % 9) * largeSize;\n  xAccross += (subcell % 3) * smallSize + smallSize / 2;\n  let yAccross = Math.floor(cell / 9) * largeSize;\n  yAccross += Math.floor(subcell / 3) * smallSize + smallSize / 2;\n  return [xAccross, yAccross];\n};\n\nexport const snapTo = (size: number, x: number, y: number) => {\n  // snap to the closest\n  let spacing = size / (9 * 3);\n  let snap = spacing;\n\n  const x1 = Math.round((x - spacing * 0.5) / snap) * snap + spacing * 0.5;\n  const y1 = Math.round((y - spacing * 0.5) / snap) * snap + spacing * 0.5;\n\n  return [x1, y1];\n};\n","import { Coordinate } from \"../../state/model\";\nimport { toCoordinates } from \"../size/sizer\";\nimport React from \"react\";\n\nexport const Line = ({\n  start,\n  end,\n  seen,\n  size\n}: {\n  start: Coordinate;\n  end: Coordinate;\n  seen: Set<Coordinate>;\n  size: number;\n}) => {\n  const seenStart = seen.has(start);\n  const seenEnd = seen.has(end);\n  const startCoords = toCoordinates(size, start);\n  const endCoords = toCoordinates(size, end);\n  const boxSize = size / 9 / 4;\n  const centerStartX = startCoords[0] - boxSize / 2;\n  const centerStartY = startCoords[1] - boxSize / 2;\n  const centerEndX = endCoords[0] - boxSize / 2;\n  const centerEndY = endCoords[1] - boxSize / 2;\n  const startNode = seenStart ? null : (\n    <rect\n      x={centerStartX}\n      y={centerStartY}\n      width={boxSize * 0.8}\n      height={boxSize * 0.9}\n      fill=\"rgba(174, 214, 157, 0.2)\"\n      style={{ pointerEvents: \"none\" }}\n    />\n  );\n  const endNode = seenEnd ? null : (\n    <rect\n      x={centerEndX}\n      y={centerEndY}\n      width={boxSize * 0.8}\n      height={boxSize * 0.9}\n      fill=\"rgba(245, 240, 129, 0.2)\"\n      style={{ pointerEvents: \"none\" }}\n    />\n  );\n\n  const midPointX = (startCoords[0] + endCoords[0]) / 2;\n  const midPointY = (startCoords[1] + endCoords[1]) / 2;\n  // const rise = Math.abs(midPointY - endCoords[1]);\n  // const run = Math.abs(midPointX - endCoords[0]);\n  // const angle = -run / rise;\n  return (\n    <g>\n      <path\n        d={`M ${startCoords[0]} ${startCoords[1]} Q ${midPointX} ${midPointY}\n        ${endCoords[0]} ${endCoords[1]}`}\n        fill=\"transparent\"\n        stroke=\"#0000ffaa\"\n        style={{ pointerEvents: \"none\" }}\n      />\n      {startNode}\n      {endNode}\n    </g>\n  );\n};\n","import React, { useState, Dispatch } from \"react\";\nimport CSS from \"csstype\";\nimport { connect } from \"react-redux\";\nimport { Coordinate, Link, CellState } from \"../../state/model\";\nimport {\n  getSmallCoordinatesFromXY,\n  toCoordinates,\n  snapTo\n} from \"../size/sizer\";\nimport { Line } from \"./Line\";\nimport { RootState } from \"../../state/store\";\n\nconst defaultStyle: CSS.Properties = {\n  position: \"absolute\",\n  zIndex: 2\n};\n\nconst lineStyle: CSS.Properties = {\n  pointerEvents: \"none\",\n  stroke: \"green\"\n};\n\nexport type PaintProps = {\n  size: number;\n  board: Array<CellState>;\n};\n\ntype LineCoordinates = {\n  start: Coordinate;\n  end: Coordinate;\n};\ntype OngoingLine = {\n  start: Coordinate;\n  x: number;\n  y: number;\n} | null;\n\nexport const PaintUI = (props: PaintProps) => {\n  const { size } = props;\n\n  const [lineState, setLineState] = useState<Array<LineCoordinates>>([]);\n  const [ongoingLine, setOngoingLine] = useState<OngoingLine>(null);\n\n  const lines = lineState.map(x => (\n    <Line seen={new Set()} size={size} start={x.start} end={x.end} />\n  ));\n  let ongoing = <></>;\n  if (ongoingLine) {\n    const [x, y] = toCoordinates(size, ongoingLine.start);\n    ongoing = (\n      <path\n        d={`M ${x} ${y} L ${ongoingLine.x} ${ongoingLine.y}`}\n        style={lineStyle}\n      />\n    );\n  }\n\n  return (\n    <svg\n      width={props.size}\n      height={props.size}\n      style={defaultStyle}\n      onClick={onSvgClick(\n        size,\n        props.board,\n        setLineState,\n        setOngoingLine,\n        lineState,\n        ongoingLine\n      )}\n      onMouseMove={onMove(size, setOngoingLine, ongoingLine)}\n    >\n      {lines}\n      {ongoing}\n    </svg>\n  );\n};\n\ntype SvgClick = React.MouseEvent<SVGElement>;\ntype StateDispatch<T> = Dispatch<React.SetStateAction<T>>;\n\nconst onMove = (\n  size: number,\n  setOngoingLine: StateDispatch<OngoingLine>,\n  ongoingLine: OngoingLine\n) => (e: SvgClick) => {\n  if (!(e.target instanceof SVGElement)) {\n    return;\n  }\n  if (ongoingLine?.start) {\n    const rect = e.target.getBoundingClientRect();\n    const [x, y] = snapTo(size, e.clientX - rect.left, e.clientY - rect.top);\n    setOngoingLine({\n      ...ongoingLine,\n      x,\n      y\n    });\n  }\n};\n\nconst onSvgClick = (\n  size: number,\n  board: Array<CellState>,\n  setLineState: StateDispatch<Array<Link>>,\n  setOngoingLine: StateDispatch<OngoingLine>,\n  lineState: Array<Link>,\n  ongoingLine: OngoingLine\n) => (e: SvgClick) => {\n  if (ongoingLine == null) {\n    return startLine(size, e, setOngoingLine, board);\n  } else {\n    // then we're looking for a second click\n    return commitLine(\n      size,\n      e,\n      ongoingLine,\n      lineState,\n      setOngoingLine,\n      setLineState,\n      board\n    );\n  }\n};\n\nconst commitLine = (\n  size: number,\n  e: SvgClick,\n  line: OngoingLine,\n  lines: Array<Link>,\n  setLine: StateDispatch<OngoingLine>,\n  setLines: StateDispatch<Array<Link>>,\n  board: Array<CellState>\n) => {\n  if (!(e.target instanceof SVGElement)) {\n    return;\n  }\n\n  const target = e.target;\n  const rect = target.getBoundingClientRect();\n  const [x, y] = snapTo(size, e.clientX - rect.left, e.clientY - rect.top);\n  const coord: Coordinate = getSmallCoordinatesFromXY(size, x, y);\n  const small = board[coord.cell].small;\n  const correctClick = small.indexOf(coord.subcell + 1) !== -1;\n  if (correctClick && line !== null) {\n    // commit the click and reset the line\n    const next: Link = {\n      start: line.start,\n      end: coord\n    };\n    setLines([...lines, next]);\n    setLine(null);\n  }\n};\n\nconst startLine = (\n  size: number,\n  e: SvgClick,\n  setLine: StateDispatch<OngoingLine>,\n  board: Array<CellState>\n) => {\n  if (!(e.target instanceof SVGElement)) {\n    return;\n  }\n  const target = e.target;\n  const rect = target.getBoundingClientRect();\n  const [x, y] = snapTo(size, e.clientX - rect.left, e.clientY - rect.top);\n  const coord = getSmallCoordinatesFromXY(size, x, y);\n  const small = board[coord.cell].small;\n  const correctClick = small.indexOf(coord.subcell + 1) !== -1;\n  if (correctClick) {\n    setLine({\n      start: coord,\n      x: x,\n      y: y\n    });\n  }\n};\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    size: state.settings.boardSize,\n    board: state.cells.present.cells\n  };\n};\n\nexport const Paint = connect(mapStateToProps)(PaintUI);\n","import React from \"react\";\nimport { Paint } from \"./paint/Painter\";\nimport { connect } from \"react-redux\";\nimport { State } from \"../state/model\";\nimport { RootState } from \"../state/store\";\n\nexport type Paint = {\n  cell: number;\n  subcell: number;\n  color_start: string;\n  color_end: string;\n  color_line: string;\n};\n\nexport type PaintManagerProps = {\n  size: number;\n  enabled: boolean;\n};\n\nexport const PaintManager = (props: PaintManagerProps) => {\n  const { enabled } = props;\n  if (!enabled) {\n    return <></>;\n  }\n  const painter = <Paint />;\n  return <div>{painter}</div>;\n};\n\nconst mapStateToProps = (state: RootState) => ({\n  enabled: state.settings.state === State.PAINTING,\n  size: state.settings.boardSize\n});\n\nexport const ConnectedPainter = connect(mapStateToProps)(PaintManager);\n","import React from \"react\";\nimport ReduxToastr from 'react-redux-toastr'\nimport \"./App.css\";\nimport { ToastProvider } from \"react-toast-notifications\";\nimport { FilteredBoard } from \"./ui/Board\";\nimport { store, RootState } from \"./state/store\";\nimport { Provider } from \"react-redux\";\nimport { ConnectedPanel } from \"./ui/SidePanel\";\nimport { Skeleton } from \"./ui/Skeleton\";\nimport { ResizePanel } from \"./ui/ResizeablePanel\";\nimport { ConnectedPainter } from \"./ui/PaintManager\";\n\nconst App: React.FC = () => {\n  const Mainboard = (\n    <ResizePanel>\n      <ConnectedPainter />\n      <FilteredBoard />\n    </ResizePanel>\n  );\n\n  return (\n    <Provider store={store}>\n      <ToastProvider>\n        <ReduxToastr\n          timeOut={4000}\n          newestOnTop={false}\n          preventDuplicates\n          position=\"top-right\"\n          transitionIn=\"fadeIn\"\n          transitionOut=\"fadeOut\"\n          progressBar\n          closeOnToastrClick />\n        <Skeleton board={Mainboard} side={<ConnectedPanel />} />\n      </ToastProvider>\n    </Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}